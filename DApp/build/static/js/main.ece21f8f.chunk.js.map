{"version":3,"sources":["serviceWorker.js","index.js","components/App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","React","require","Component","reactrouter","Web3","HashRouter","Route","Switch","contract","web3","offer","contractABI","ipfs","ipfsClient","host","port","protocol","accounts","props","_this","Object","_home_emre_CARDAMOM_DApp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","_home_emre_CARDAMOM_DApp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_emre_CARDAMOM_DApp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","onSubmit","methods","add","error","setRequest","hash","send","from","fileHash","account","offerPrice","offers","purchaseOffer","bind","_home_emre_CARDAMOM_DApp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","loadWeb3","loadBlockchainData","ethereum","enable","currentProvider","alert","eth","Contract","offerCount","i","concat","_home_emre_CARDAMOM_DApp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","requestCount","id","_this2","loading","owner","provider","value","once","receipt","_this3","className","role","type","onChange","scope","map","key","toString","utils","fromWei","price","client","purchased","name","onClick"],"mappings":"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","file":"static/js/main.ece21f8f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","//import React, { Component } from 'react';\n//import Web3 from 'web3';\n//import './App.css';\n//import PrinterMarketplace from '../abis/PrinterMarketplace.json'\nvar React = require('react');\nvar Component = React.Component;\nconst reactrouter = require('react-router-dom');\nconst HashRouter = reactrouter.HashRouter;\nconst Route = reactrouter.Route\nconst Switch = reactrouter.Switch\n\nconst Web3 = require('web3');\nrequire('./App.css');\nconst contractABI = require('../abis/contractABI.json')\n\n//const EventEmitter = require('events');\n//const myEmitter = new EventEmitter();\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\nlet contract;\n//let contractAddress;\nconst contractAddress = '0x8285ed4dbfba6faa5bd9da628579239168dd2e06';\n\nconst accounts = '0xd41434a7aff05F0BC72AfbE67734A1fE9c63c209'\nlet web3;\nlet offer\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n    // await this.listOffers()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n      web3 = window.web3\n      console.log(window.web3.currentProvider)\n\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n      console.log(window.web3.currentProvider)\n      web3 = window.web3\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n\n\n/*     try {\n      const provider = new Web3.providers.HttpProvider(\"https://ropsten.infura.io/v3/c968bc8207224bbf8eff18c811b31739\");\n    //const provider = new Web3.providers.HttpProvider(\"https://ropsten.infura.io/c968bc8207224bbf8eff18c811b31739\");\n      web3 = new Web3(provider);\n      web3.eth.net.isListening()\n        .then(() => console.log('web3 is connected'))\n        .catch(e => console.log('Something went wrong'));\n    }\n    catch (error) {\n      console.log(error)\n    } */\n  }\n\n\n\n\n  async loadBlockchainData() {\n    \n    // console.log(web3)\n\n    // Load account\n    //const accounts = await web3.eth.getAccounts()\n    console.log(accounts)\n    this.setState({ account: accounts })\n    //const networkId = await web3.eth.net.getId()\n    //const networkData = PrinterMarketplace.networks[networkId]\n   //  contractAddress = '0x13d36db04ea386052b6e2ddf407660045220c8f5';\n    contract = new web3.eth.Contract(contractABI, contractAddress);\n    if (contract) {\n      console.log('Contract is initialized')\n      console.log(contract)\n    }\n    else {\n      window.alert('Smart contract not deployed to detected network.')\n    }\n    this.setState({ contract })\n    /*       const fileHash = await contract.methods.get().call()\n          console.log(fileHash)\n          this.setState({ fileHash }) */\n          console.log('CONTRACT: ', contract)\n          console.log('Methods: ', contract.methods)\n    const offerCount = await contract.methods.offerCount().call()\n    this.setState({ offerCount })\n    // Load offers\n    for (var i = 1; i <= offerCount; i++) {\n      offer = await contract.methods.offers(i).call()\n      console.log('OFFER: ', offer)\n      this.setState({\n        offers: [...this.state.offers, offer]\n      })\n    }\n    console.log('Offers:', this.state.offers)\n    console.log(await contract.methods.requestCount().call())\n\n  }\n  // fetch and list all offers from Smart Contract \n  /*   async listOffers() {\n      var offers = new Array();l\n      offers = await contract.methods.getOffers().call()\n      for (i in offers) {\n        console.log(offers[i])\n      }\n  \n    }\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      fileHash: '',\n      contract: null,\n      web3: null,\n      buffer: null,\n      account: null,\n      offerPrice: null,\n      offers: []\n    }\n\n    this.purchaseOffer = this.purchaseOffer.bind(this)\n  }\n\n  captureFile = (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  onSubmit = (event) => {\n    console.log(this.state.contract.methods)\n    event.preventDefault()\n    console.log(\"Submitting file to ipfs...\")\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      if (error) {\n        console.error(error)\n        return\n      }\n      //web3.eth.sendRawTransaction({from: this.state.account, to: contractAddress})\n/*       this.state.contract.methods.setRequest(result[0].hash).send({ from: this.state.account }).then((r) => {\n        return this.setState({ fileHash: result[0].hash })\n      }) */\n      contract.methods.setRequest(result[0].hash).send({from: accounts})\n\n    })\n  }\n\n  purchaseOffer(id, offerPrice, fileHash) {\n    this.setState({ loading: true })\n    console.log('ID', id,\n      'OFFERPRICE', offerPrice,\n      'HASH', fileHash,\n      'OWNER', offer.owner)\n    console.log(fileHash)\n    this.state.contract.methods.purchaseOffer(id, offerPrice, this.state.account, offer.provider, fileHash)\n    .send({ from: this.state.account, value: offerPrice })\n      .once('receipt', (receipt) => {\n        this.setState({ loading: false })\n      })\n  }\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a>\n            PrinterMarketplace\n          </a>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <p>&nbsp;</p>\n                <h2>Change File</h2>\n                <form onSubmit={this.onSubmit} >\n                  <input type='file' onChange={this.captureFile} />\n                  <input type='submit' />\n                </form>\n                <p>&nbsp;</p>\n                <h2>Offer Listing</h2>\n                <table className=\"table\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">#</th>\n                      <th scope=\"col\">Price</th>\n                      <th scope=\"col\">File Hash</th>\n                      <th scope=\"col\">Client</th>\n                      <th scope=\"col\">Provider</th>\n                      <th scope=\"col\"></th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      this.state.offers.map((offer, key) => {\n                        return (\n                          <tr key={key}>\n                            <td scope=\"row\">{offer.id.toString()}</td>\n                            <td>{web3.utils.fromWei(offer.price.toString(), 'ether')} ETH</td>\n                            <td>{offer.fileHash}</td>\n                            <td>{offer.client.toString()}</td>\n                            <td>{offer.provider.toString()}</td>\n                            <td>{!offer.purchased\n                              ? <button\n                                name={offer.id}\n                                value={offer.price}\n                                onClick={(event) => {\n                                  this.purchaseOffer(event.target.name, event.target.value, offer.fileHash)\n                                }}\n                              >\n                                Buy\n                  </button>\n                              : null\n                            }\n                            </td>\n                          </tr>\n                        )\n                      })\n                    }\n                  </tbody>\n                </table>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}